
+ 스프링 (Spring)
  : Enterprise급 application 개발을 위한 framework

> 특징
1. Rod Johnson이 창시
2. 어플리케이션 개발의 복잡성을 줄여주기 위한 목적
3. EJB(Enterprise JavaBean) 사용으로 수행되었던 모든 기능을 POJO를 사용해서 가능하게 함
  - EJB : 기업 환경을 구축하기 위한 서버측 컴포넌트 모델
          : 어플리케이션에서 업무 로직을 가지고 있는 서버 어플리케이션

  - POJO(Plain, Old Java Object) : getter / setter 를 가지고 있는 단순한 자바 오브젝트

4. IOC (Inversion of Control) - 제어의 역전
  : 개발자에게 제어권이 있는 것이 아니라 컨테이너에게 제어권이 있음
5. DI(Dependency Injection) - 의존성 주입
6. AOP (Aspect Oriented Programming) - 관점 지향 프로그래밍
7. POJO 지원
8. 모듈화 되어 있어 필요한 모듈만 추가 가능

Spring에서 객체를 Bean으로 부름
Spring에서 POJO(plain, old java object)를 ‘Beans’라고 부른다.

Beans는 애플리케이션의 핵심을 이루는 객체이며, 
Spring IoC(Inversion of Control) 컨테이너에 의해 인스턴스화, 관리, 생성된다.

Beans는 우리가 컨테이너에 공급하는 설정 메타 데이터(XML 파일)에 의해 생성된다.

컨테이너는 이 메타 데이터를 통해 Bean의 생성, 
Bean Life Cycle, Bean Dependency(종속성) 등을 알 수 있다.

애플리케이션의 객체가 지정되면, 
해당 객체는 getBean() 메서드를 통해 가져올 수 있다.

===========================================================================
> 메인 코드를 거의 수정하지 않고 각 개발자가 각자 원하는 클래스를 만들어두면
    전체 구조를 담당하는 개발자(매니저)가 xml을 통해 추가 및 수정

===========================================================================
- AOP (Aspect Oriented Programming) - 관점 지향 프로그래밍
  -> OOP를 더 잘 구현할 수 있도록 도와주는 보조 프로그램
  -> 사용 : 원래 업무들에서 공통된 엄무들을 찾고 그 업무들은 AOP로 만들어 놓고
               필요로 한 순간에 사이사이 끼워 넣기

> AOP 종류
 - before	: 메소드 실행 전 실행
 - after -returning	: 메소드 실행 후 실행
 - after-throwing : 메소드 실행 중 예외발생 실행
 - after : 메소드 실행 후 실행(예외 발생 여부 상관 없음)
 - around : 메소드 실행 전/후, 예외 발생 시 실행

> AOP 종류
 1. AspectJ	1) 코드 적용
			2) Compile시 적용

 2. spring		3) Runtime시 적용







